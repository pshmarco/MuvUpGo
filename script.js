document.addEventListener('DOMContentLoaded', function() {

    // ==========================================================
    // 1. OBTENCIÃ“N DE ELEMENTOS DOM
    // ==========================================================
    const navItems = document.querySelectorAll('.nav-item');
    const screens = document.querySelectorAll('.screen');
    const notificationBells = document.querySelectorAll('.notification-bell');
    const backArrows = document.querySelectorAll('.back-arrow');
    const startChallengeButton = document.getElementById('start-challenge-button');
    const addFriendButton = document.querySelector('.add-friend-button');
    const openRoutinesButton = document.getElementById('open-routines-button');
    const createEventButton = document.getElementById('create-event-button');
    const createEventModal = document.getElementById('create-event-modal');
    const closeCreateEventButton = document.getElementById('close-create-event');
    const cancelCreateEventButton = document.getElementById('cancel-create-event');
    const createEventForm = document.getElementById('create-event-form');
    const unlimitedBtn = document.getElementById('unlimited-btn');
    const limitedBtn = document.getElementById('limited-btn');
    const limitInputContainer = document.getElementById('limit-input-container');
    const limitNumberInput = document.getElementById('event-limit-number');
    const streakCount = document.getElementById('streak-count');
    const consecutiveDaysStat = document.getElementById('consecutive-days-stat');
    const resetButton = document.getElementById('reset-button');
    const eventsListContainer = document.getElementById('events-list');
    const friendsListContainer = document.getElementById('friends-list');
    const collectiblesListContainer = document.getElementById('collectibles-list-container');
    const sunMuvPhraseElement = document.getElementById('sun-muv-phrase');
    const routinesListContainer = document.getElementById('routines-list');
    const socialFeedContainer = document.getElementById('social-feed');
    const activityPills = document.querySelectorAll('.activity-pill');
    const friendsFilterPills = document.querySelectorAll('#friends-filter-pills .filter-pill');
    const mapContainer = document.getElementById('map-container');

    // Elementos del Mapa necesarios para la lÃ³gica de pines
    const mapInfoPanel = document.querySelector('.map-info-panel'); // Asumido
    const mapGoToEventButton = document.getElementById('map-go-to-event'); // âœ… Corregido el ID
    const mapEventTitle = document.getElementById('map-event-title'); // Asumido
    const mapEventLocation = document.getElementById('map-event-location'); // Asumido

    // Elementos del Perfil
    const levelCharacter = document.getElementById('level-character');
    const profileLevelElement = document.querySelector('#profile-screen .profile-level');
    const profileGreetingIcon = document.querySelector('.greeting-icon');

    const darkModeToggle = document.getElementById('dark-mode-toggle'); 

    // ==========================================================
    // 2. DATA DE LA APLICACIÃ“N (Â¡ESTO FALTABA!)
    // ==========================================================

    let userLevel = 6; 
    let currentMapBgIndex = 0;
    let currentActivityFilter = 'all';
    let currentFriendFilter = 'all';

    const allEvents = [
        { title: 'FutCristobal', description: 'Para hacer deporte :D', icon: 'fas fa-futbol', cost: 'Gratis', location: 'Cancha -3 851', participants: '2/14', tag: 'soccer', isFriendEvent: true, mapCoords: { top: '15%', left: '75%' } },
        { title: 'Torneo Basket 3v3', description: 'Torneo amistoso benÃ©fico.', icon: 'fas fa-basketball-ball', cost: '$5.000 CLP', location: 'Gimnasio Quinta Normal', participants: '6/6 (Lleno)', tag: 'basketball', isFriendEvent: false, mapCoords: { top: '30%', left: '20%' } },
        { title: 'Clase de Yoga Matinal', description: 'SesiÃ³n de estiramiento y meditaciÃ³n.', icon: 'fas fa-hand-holding-heart', cost: 'Gratis', location: 'SalÃ³n MACVM', participants: '12/20', tag: 'yoga', isFriendEvent: false, mapCoords: { top: '65%', left: '70%' } },
        { title: 'Gym (asesorado)', description: 'Ruta fÃ¡cil para principiantes.', icon: 'fas fa-dumbbell', cost: 'Gratis (Para UChile)', location: 'Gimnasio -3 851', participants: '10/15', tag: 'gym', isFriendEvent: false, mapCoords: { top: '10%', left: '80%' } },
        { title: 'Carrera 5K Comunitaria', description: 'Ruta de 5km por el borde del rÃ­o.', icon: 'fas fa-running', cost: 'Gratis', location: 'CajÃ³n del Maipo', participants: '85 inscritos', tag: 'running', isFriendEvent: false, mapCoords: { top: '80%', left: '45%' } },
        { title: 'Pichanga de Fin de Semana', description: 'FÃºtbol amateur en la cancha del barrio.', icon: 'fas fa-futbol', cost: '$1.000 CLP', location: 'Cancha Pajaritos', participants: '15/22', tag: 'soccer', isFriendEvent: false, mapCoords: { top: '50%', left: '50%' } }
    ];

    const friendsList = [
        { name: 'AgustÃ­n HenrÃ­quez', status: 'Online', isFriend: true },
        { name: 'CristÃ³bal Garrido', status: 'Online', isFriend: true },
        { name: 'Marco Soto', status: 'Offline', isFriend: true },
        { name: 'MartÃ­n Vilches', status: 'Online', isFriend: false },
        { name: 'Vicente ColorÃ­n', status: 'Offline', isFriend: false },
        { name: 'Huevito Rey', status: 'Online', isFriend: false }
    ];

    const socialUsers = friendsList.filter(f => f.isFriend);
    const postCaptions = [
        "Me genera mucha impotencia que Chile Sub-20 pierda 3 partidos de 4, y luego el entrenador salga a declarar que tuvieron mÃ¡s posesiÃ³n y que sometieronÂ¿ a los rivales. No sÃ© que se cree el payaso ese, no le ha ganado a nadie y declara como si fuera Guardiola, por eso Chile estÃ¡ como estÃ¡ ðŸ˜ ðŸ˜ .",
        "Sinceramente, Â¿cuÃ¡l creen que es la verdadera razÃ³n por la que Leandro Fernandez bajÃ³ muchÃ­simo el rendimiento del 2024? Yo pienso que es una mezcla entre su lesiÃ³n y el cambio de esquema del equipo. #VamosLaU ðŸ’™ðŸ¤˜",
        "Finalmente aceptas tu destino: hacer deporte, trabajar, estar solo y ser buena persona.",
    ];

    const collectibles = [
        { icon: 'fas fa-futbol', title: 'FutbolÃ­n', meta: 'Por participar en 10 eventos de FÃºtbol.' },
        { icon: 'fas fa-heart', title: 'Fiel con la Racha', meta: 'Por completar 5 dÃ­as de racha consecutivos.' },
        { icon: 'fas fa-mountain', title: 'Listo para el Everest', meta: 'Por finalizar un evento de Escalada o MontaÃ±a.' },
    ];

    const sunMuvPhrases = [
        "La felicidad no es tener lo que quieres, sino que querer lo que tienes",
        "No cuentes los dÃ­as, hazlos contar",
        "No eres lo que logras, eres lo que superas",
        "Si no te gusta algo, cÃ¡mbialo. Si no puedes cambiarlo, cambia tu actitud",
        "El Ã©xito no es la clave de la felicidad. La felicidad es la clave del Ã©xito",
        "La mejor manera de predecir el futuro es crearlo",
        "No importa que tan lento, siempre avanza",
        "No te compares con los demÃ¡s, compÃ¡rate contigo mismo",
        "La vida es un 10% lo que te pasa y un 90% cÃ³mo te comportas",
        "No esperes que pase la tormenta, aprende a bailar bajo la lluvia",
        "El humano solamente vive dos vidas, y la segunda empieza el dia que se da cuenta que tiene una sola",
        "Si no destacas por talento, hazlo por disciplina hasta que parezca que naciste para ello"
    ];

    const routines = [
        { title: 'Fuerza', exercises: '10x Sentadillas, 10x Flexiones, 20x Zancadas.' },
        { title: 'Cardio', exercises: 'Saltos de Tijera, Rodillas al pecho, Escaladores.' },
        { title: 'Core', exercises: 'Plancha, Crunches, Levantamiento de piernas.' },
    ];

    // ==========================================================
    // 3. FUNCIONES (DEFINIDAS ANTES DE SER LLAMADAS)
    // ==========================================================

// ... (Tus funciones existentes: navigateTo, renderEvents, etc.) ...

// ------------------------------------------------------------------------
// --- 3.X FunciÃ³n del Modo Oscuro ---
// ------------------------------------------------------------------------

function toggleDarkMode() {
    // 1. Alterna la clase 'dark-mode' en el body
    const isDarkMode = document.body.classList.toggle('dark-mode');
    
    // 2. Guarda la preferencia en el navegador
    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');
    
    // Opcional: Asegura que el estado del switch refleje el tema
    if (darkModeToggle) {
        darkModeToggle.checked = isDarkMode;
    }
}

    // --- 3.1 Funciones de NavegaciÃ³n ---
    function navigateTo(screenId) {
        if (screenId === 'messages-screen') {
            document.querySelector('#messages-screen .back-arrow').setAttribute('data-screen', 'home-screen'); 
        } else {
            navItems.forEach(nav => nav.classList.remove('active'));
            const targetNav = document.querySelector(`.nav-item[data-screen="${screenId}"]`);
            if (targetNav) {
                targetNav.classList.add('active');
            }
        }
        
        screens.forEach(screen => screen.classList.remove('active'));
        const targetScreen = document.getElementById(screenId);
        if (targetScreen) {
            targetScreen.classList.add('active');
            // Mantenemos esta lÃ­nea con la variable mapInfoPanel, asumiendo que existe en el HTML
            if (screenId !== 'map-screen' && mapInfoPanel) {
                mapInfoPanel.classList.add('hidden');
            }
        }
    }
    
    // --- 3.2 Funciones de Renderizado ---
    
    // Renderiza la lista de eventos con la funcionalidad de filtro
    function renderEvents() {
        eventsListContainer.innerHTML = '';
        
        allEvents.forEach(event => {
            const matchesActivity = currentActivityFilter === 'all' || event.tag === currentActivityFilter;
            
            let matchesFriendship;
            if (currentFriendFilter === 'all') {
                matchesFriendship = true;
            } else if (currentFriendFilter === 'community') {
                matchesFriendship = !event.isFriendEvent; 
            } else if (currentFriendFilter === 'friends') {
                matchesFriendship = event.isFriendEvent;
            }

            const isVisible = matchesActivity && matchesFriendship;
            
            const eventCard = document.createElement('div');
            eventCard.classList.add('event-card');
            eventCard.classList.toggle('hidden-event', !isVisible);
            eventCard.classList.toggle('is-friend', event.isFriendEvent);
            eventCard.setAttribute('data-tag', event.tag);
            
            const friendIndicator = event.isFriendEvent ? 
                `<p style="color: var(--secondary); font-weight: 700;">Â¡Evento de un Bulla!</p>` : 
                `<p>${event.description}</p>`;
            
            eventCard.innerHTML = `
                <div class="event-top">
                    <div class="event-info">
                        <h3>${event.title}</h3>
                        ${friendIndicator}
                    </div>
                    <div class="event-cost">${event.cost}</div>
                </div>
                <div class="event-details">
                    <div class="event-location">
                        <i class="fas fa-map-marker-alt"></i>
                        <span>${event.location}</span>
                    </div>
                    <div class="event-participants">
                        <i class="fas fa-users"></i>
                        <span>${event.participants}</span>
                    </div>
                </div>
            `;
            eventsListContainer.appendChild(eventCard);
        });
    }

    // Renderiza la lista de amigos
    function renderFriendsList() {
        const myFriends = friendsList.filter(f => f.isFriend);
        const suggestedFriends = friendsList.filter(f => !f.isFriend);

        friendsListContainer.innerHTML = '';

        let friendsHtml = '';

        // Render Tus Bullas
        if (myFriends.length > 0) {
            friendsHtml += '<h2 class="friendsss-title">Tus Bullas</h2>';
            myFriends.forEach(friend => {
                friendsHtml += `
                    <div class="friend-item">
                        <div class="friend-details">
                            <div class="friend-avatar"><i class="fas fa-user"></i></div>
                            <div>
                                <div class="friend-name">${friend.name}</div>
                                <div class="friend-status" style="color: ${friend.status === 'Online' ? '#4CAF50' : 'var(--medium-gray)'}">${friend.status}</div>
                            </div>
                        </div>
                        <button class="friend-action-btn">Mensaje</button>
                    </div>
                `;
            });
        }
        
        // Render Sugeridos
        if (suggestedFriends.length > 0) {
            friendsHtml += '<h2 class="section-title">Sugeridos</h2>';
            suggestedFriends.forEach(friend => {
                friendsHtml += `
                    <div class="friend-item">
                        <div class="friend-details">
                            <div class="friend-avatar"><i class="fas fa-user"></i></div>
                            <div>
                                <div class="friend-name">${friend.name}</div>
                                <div class="friend-status" style="color: ${friend.status === 'Online' ? '#4CAF50' : 'var(--medium-gray)'}">${friend.status}</div>
                            </div>
                        </div>
                        <button class="friend-action-btn add-btn">AÃ±adir</button>
                    </div>
                `;
            });
        }

        friendsListContainer.innerHTML = friendsHtml;
    }
    
    // Renderiza los coleccionables (Ahora en Perfil)
    function renderCollectibles() {
        collectiblesListContainer.innerHTML = '';
        collectibles.forEach(item => {
            const collectibleItem = `
                <div class="collectible-item">
                    <div class="collectible-icon"><i class="${item.icon}"></i></div>
                    <div class="collectible-info">
                        <div class="collectible-title">${item.title}</div>
                        <div class="collectible-meta">${item.meta}</div>
                    </div>
                </div>
            `;
            collectiblesListContainer.innerHTML += collectibleItem;
        });
    }
    
    // Renderiza las rutinas modelo
    function renderRoutines() {
        routinesListContainer.innerHTML = '';
        routines.forEach(routine => {
            const routineCard = `
                <div class="routine-card">
                    <div class="routine-details">
                        <h3>${routine.title}</h3>
                        <p>${routine.exercises}</p>
                    </div>
                    <button class="start-routine-btn">INICIAR</button>
                </div>
            `;
            routinesListContainer.innerHTML += routineCard;
        });
    }

    // Inicializa la pantalla de Red Social (SimulaciÃ³n con captions variados)
    function renderSocialFeed() {
        socialFeedContainer.innerHTML = '';
        
        // SecciÃ³n "Tus Bullas" (Amigos)
        const friendsSection = document.createElement('div');
        friendsSection.innerHTML = '<h2 class="section-title">Tus Bullas</h2>';
        socialFeedContainer.appendChild(friendsSection);
        
        socialUsers.forEach((user, index) => {
            const post = document.createElement('div');
            post.classList.add('social-post');
            
            const caption = postCaptions[index % postCaptions.length];
            const timeAgo = ['Hace 2h', 'Hace 1h', 'Hace 30min', 'Hace 15min'][index % 4];
            const initialLikes = Math.floor(Math.random() * 50) + 5; 
            
            post.innerHTML = `
                <div class="post-header">
                    <div class="post-avatar"><i class="fas fa-user"></i></div>
                    <span class="post-username">${user.name}</span>
                </div>
                <div class="post-content">
                    ${caption}
                </div>
                <div class="post-actions">
                    <div class="like-section">
                        <i class="far fa-heart like-button"></i>
                        <span class="like-count">${initialLikes}</span>
                    </div>
                    <span class="post-time">${timeAgo}</span>
                </div>
            `;
            
            const likeButton = post.querySelector('.like-button');
            const likeCount = post.querySelector('.like-count');
            let currentLikes = initialLikes;
            let isLiked = false;
            
            likeButton.addEventListener('click', function() {
                if (!isLiked) {
                    this.classList.add('liked');
                    this.classList.remove('far');
                    this.classList.add('fas');
                    currentLikes++;
                    isLiked = true;
                } else {
                    this.classList.remove('liked');
                    this.classList.remove('fas');
                    this.classList.add('far');
                    currentLikes--;
                    isLiked = false;
                }
                likeCount.textContent = currentLikes;
            });

            socialFeedContainer.appendChild(post);
        });
        
        // SecciÃ³n "Recomendaciones y Comunidad"
        const communitySection = document.createElement('div');
        communitySection.innerHTML = '<h2 class="section-title">Recomendaciones y Comunidad</h2>';
        socialFeedContainer.appendChild(communitySection);
        
        // Posts de la comunidad (usuarios no amigos)
        const communityUsers = friendsList.filter(f => !f.isFriend);
        const communityCaptions = [
            "No puede ser que el desastre de Harry Maguire sea futbolista profesional, y despÃºes estoy yo que entreno todos los dÃ­as para nada, cada vez veo mÃ¡s lejano el sueÃ±o de ser futbolista profesional, aÃºn mÃ¡s cuando veo en la tele que hay chicos de 17 en europa. Me toco estudiar para cÃ¡lculo no mÃ¡s ðŸ˜”ðŸ˜”ðŸ˜”.",
            "Hace rato que no salÃ­a a trotar en la maÃ±ana, definitivamente mejorÃ³ mi estado de Ã¡nimo y dormÃ­ re bien. Recomendado por la Universidad de Coloros, Colorado.",
            "Hola, estoy funado, pero gracias a MuvUp Go! me estoy rehabilitando para ser un ciudadano ejemplar. Sin duda la mejor aplicaciÃ³n que he visto en los Ãºltimos 5 minutos (me acabo de despertar)."
        ];
        
        communityUsers.forEach((user, index) => {
            const post = document.createElement('div');
            post.classList.add('social-post');
            
            const caption = communityCaptions[index % communityCaptions.length];
            const timeAgo = ['Hace 4h', 'Hace 6h', 'Hace 1d', 'Hace 2d'][index % 4];
            const initialLikes = Math.floor(Math.random() * 30) + 2;
            
            post.innerHTML = `
                <div class="post-header">
                    <div class="post-avatar"><i class="fas fa-users"></i></div>
                    <span class="post-username">${user.name}</span>
                </div>
                <div class="post-content">
                    ${caption}
                </div>
                <div class="post-actions">
                    <div class="like-section">
                    <i class="far fa-heart like-button"></i>
                        <span class="like-count">${initialLikes}</span>
                </div>
                    <span class="post-time">${timeAgo}</span>
                </div>
            `;
            
            const likeButton = post.querySelector('.like-button');
            const likeCount = post.querySelector('.like-count');
            let currentLikes = initialLikes;
            let isLiked = false;
            
            likeButton.addEventListener('click', function() {
                if (!isLiked) {
                    this.classList.add('liked');
                    this.classList.remove('far');
                    this.classList.add('fas');
                    currentLikes++;
                    isLiked = true;
                } else {
                    this.classList.remove('liked');
                    this.classList.remove('fas');
                    this.classList.add('far');
                    currentLikes--;
                    isLiked = false;
                }
                likeCount.textContent = currentLikes;
            });

            socialFeedContainer.appendChild(post);
        });
    }

    // Inicializa la pantalla de Mapa (SimulaciÃ³n)
    function renderMapPins() {
        mapContainer.querySelectorAll('.map-pin').forEach(pin => pin.remove());
        
        allEvents.forEach(event => {
            if (event.mapCoords) {
                const pin = document.createElement('i');
                pin.classList.add('fas', 'fa-map-marker-alt', 'map-pin');
                pin.style.top = event.mapCoords.top;
                pin.style.left = event.mapCoords.left;
                pin.setAttribute('data-event-title', event.title);
                pin.setAttribute('data-event-location', event.location);
                pin.setAttribute('data-event-tag', event.tag);
                pin.setAttribute('data-event-friend', event.isFriendEvent ? 'true' : 'false');

                pin.addEventListener('click', function() {
                    // Verificamos si los elementos existen antes de usarlos
                    if (mapEventTitle) mapEventTitle.textContent = this.getAttribute('data-event-title');
                    if (mapEventLocation) mapEventLocation.textContent = this.getAttribute('data-event-location');
                    if (mapInfoPanel) mapInfoPanel.classList.remove('hidden');
                    
                    if (mapGoToEventButton) {
                        mapGoToEventButton.setAttribute('data-event-tag', this.getAttribute('data-event-tag'));
                        mapGoToEventButton.setAttribute('data-friend-event', this.getAttribute('data-event-friend')); 
                    }
                });
                
                mapContainer.appendChild(pin);
            }
        });
    }

    // LÃ³gica del Personaje de Nivel (Copiado de tu cÃ³digo)
    function updateLevelCharacter() {
        let iconClass = '';
        let levelText = '';
        let levelColor = '';
        let characterDescription = '';

        if (profileLevelElement) {
             profileLevelElement.textContent = `Nivel ${userLevel}`;
        }
        
        if (userLevel <= 2) {
            iconClass = 'fas fa-child';
            levelText = 'Novato';
            levelColor = '#FFC107'; 
            characterDescription = 'Un principiante tÃ­mido comenzando su viaje';
        } else if (userLevel <= 4) {
            iconClass = 'fas fa-walking';
            levelText = 'Caminante';
            levelColor = '#4CAF50';
            characterDescription = 'Un caminante decidido ganando confianza';
        } else if (userLevel <= 6) {
            iconClass = 'fas fa-running';
            levelText = 'Corredor';
            levelColor = '#2196F3';
            characterDescription = 'Un corredor enÃ©rgico mejorando su resistencia';
        } else if (userLevel <= 8) {
            iconClass = 'fas fa-dumbbell';
            levelText = 'Entrenador';
            levelColor = '#FF9800';
            characterDescription = 'Un entrenador dedicado construyendo fuerza';
        } else if (userLevel <= 10) {
            iconClass = 'fas fa-fire';
            levelText = 'Atleta';
            levelColor = '#F44336';
            characterDescription = 'Un atleta apasionado con gran determinaciÃ³n';
        } else if (userLevel <= 12) {
            iconClass = 'fas fa-mountain';
            levelText = 'Escalador';
            levelColor = '#795548';
            characterDescription = 'Un escalador audaz conquistando desafÃ­os';
        } else if (userLevel <= 14) {
            iconClass = 'fas fa-bolt';
            levelText = 'Velocista';
            levelColor = '#9C27B0';
            characterDescription = 'Un velocista explosivo con gran potencia';
        } else if (userLevel <= 16) {
            iconClass = 'fas fa-shield-alt';
            levelText = 'Guerrero';
            levelColor = '#607D8B';
            characterDescription = 'Un guerrero disciplinado con gran resistencia';
        } else if (userLevel <= 18) {
            iconClass = 'fas fa-trophy';
            levelText = 'CampeÃ³n';
            levelColor = '#FFD700';
            characterDescription = 'Un campeÃ³n experimentado dominando su arte';
        } else if (userLevel <= 19) {
            iconClass = 'fas fa-crown';
            levelText = 'Maestro';
            levelColor = '#E91E63';
            characterDescription = 'Un maestro legendario con habilidades supremas';
        } else {
            iconClass = 'fas fa-star';
            levelText = 'Leyenda';
            levelColor = '#00BCD4';
            characterDescription = 'Una leyenda viviente, el pinÃ¡culo del deporte';
        }
        
        if (levelCharacter) {
            levelCharacter.innerHTML = `
                <div class="character-container" title="${characterDescription}">
                    <i class="${iconClass}" style="color: ${levelColor}; font-size: 2rem;"></i>
                    <div class="character-glow" style="box-shadow: 0 0 20px ${levelColor}40;"></div>
                </div>
            `;
        }
    }


    // Sol Muv: Asigna una frase motivacional aleatoria
    function updateSunMuv() {
        const randomIndex = Math.floor(Math.random() * sunMuvPhrases.length);
        if (sunMuvPhraseElement) {
             sunMuvPhraseElement.textContent = sunMuvPhrases[randomIndex];
        }
    }
    
    // Actualiza los dÃ­as de racha
    function updateStreak() {
        let currentStreak = parseInt(localStorage.getItem('streak') || 5);
        if (streakCount) streakCount.textContent = currentStreak;
        if (consecutiveDaysStat) consecutiveDaysStat.textContent = currentStreak;
    }

// ==========================================================
// 4. LISTENERS DE EVENTOS (ROBUSTO)
// ==========================================================

// 1. Listeners de Modo Oscuro (solo si existe el switch)
if (darkModeToggle) {
    darkModeToggle.addEventListener('change', toggleDarkMode); 
}

// --- 4.1 NavegaciÃ³n (Generalmente seguros con querySelectorAll) ---
navItems.forEach(item => {
    item.addEventListener('click', function(e) {
        e.preventDefault();
        const screenId = this.getAttribute('data-screen');
        navigateTo(screenId);
    });
});

notificationBells.forEach(bell => {
    bell.addEventListener('click', () => navigateTo('messages-screen'));
});

backArrows.forEach(arrow => {
    arrow.addEventListener('click', function() {
        const screenId = this.getAttribute('data-screen');
        navigateTo(screenId);
    });
});

// --- LISTENERS PARA LOS FILTROS DE EVENTOS (Â¡NUEVO BLOQUE!) ---

// Filtros de Actividad (Running, Yoga, etc.)
activityPills.forEach(pill => {
    pill.addEventListener('click', function() {
        const newFilter = this.getAttribute('data-filter');
        currentActivityFilter = newFilter;

        // Actualiza la clase 'active-pill' para el estilo
        activityPills.forEach(p => p.classList.remove('active-pill'));
        this.classList.add('active-pill');

        // Vuelve a renderizar la lista de eventos con el nuevo filtro
        renderEvents();
    });
});

// Filtros de Amigos/Comunidad/Todos
friendsFilterPills.forEach(pill => {
    pill.addEventListener('click', function() {
        const newFilter = this.getAttribute('data-filter');
        currentFriendFilter = newFilter;

        // Actualiza la clase 'active-filter' para el estilo
        friendsFilterPills.forEach(p => p.classList.remove('active-filter'));
        this.classList.add('active-filter');

        // Vuelve a renderizar la lista de eventos con el nuevo filtro
        renderEvents();
    });
});

// BotÃ³n "Ver en Hub" (Ahora que el elemento fue encontrado)
if (mapGoToEventButton) {
    mapGoToEventButton.addEventListener('click', function() {
        // En un proyecto completo, esta lÃ³gica aplicarÃ­a el filtro del evento seleccionado en el mapa
        // Pero por ahora, solo aseguramos que navegue a la pantalla de Eventos
        navigateTo('challenges-screen'); 
    });
}

// --- 4.2 Botones de AcciÃ³n Individuales (NECESITAN if) ---
if (startChallengeButton) { // âœ… AÃ‘ADIDO IF
    startChallengeButton.addEventListener('click', function() { navigateTo('challenges-screen'); });
}

if (addFriendButton) { // âœ… AÃ‘ADIDO IF
    addFriendButton.addEventListener('click', function() { navigateTo('friends-screen'); });
}

if (openRoutinesButton) { // âœ… AÃ‘ADIDO IF
    openRoutinesButton.addEventListener('click', function() { navigateTo('routines-screen'); });
}

if (profileGreetingIcon) { // (Ya lo tenÃ­as, bien!)
    profileGreetingIcon.addEventListener('click', () => navigateTo('profile-screen'));
}

// Tu bloque del mapa ya estaba bien envuelto, solo tienes que asegurarte
// de que no estÃ© DENTRO del IF de darkModeToggle.

if (mapGoToEventButton) {
    mapGoToEventButton.addEventListener('click', function() {
        // ... (Tu lÃ³gica existente aquÃ­) ...
    });
}


// --- 4.4 Modales y Formularios (NECESITAN if) ---

if (createEventButton) { // âœ… AÃ‘ADIDO IF
    createEventButton.addEventListener('click', function() { createEventModal.classList.remove('hidden'); });
}

if (closeCreateEventButton) { // âœ… AÃ‘ADIDO IF
    closeCreateEventButton.addEventListener('click', function() { createEventModal.classList.add('hidden'); });
}

if (cancelCreateEventButton) { // âœ… AÃ‘ADIDO IF
    cancelCreateEventButton.addEventListener('click', function() { createEventModal.classList.add('hidden'); });
}

if (createEventModal) { // âœ… AÃ‘ADIDO IF
    createEventModal.addEventListener('click', function(e) { 
        if (e.target === createEventModal) createEventModal.classList.add('hidden'); 
    });
}

if (unlimitedBtn) { // âœ… AÃ‘ADIDO IF
    unlimitedBtn.addEventListener('click', function() {
        unlimitedBtn.classList.add('active');
        limitedBtn.classList.remove('active');
        if (limitInputContainer) limitInputContainer.classList.add('hidden'); // Chequear contenedor tambiÃ©n
        if (limitNumberInput) limitNumberInput.removeAttribute('required'); // Chequear input tambiÃ©n
    });
}

if (limitedBtn) { // âœ… AÃ‘ADIDO IF
    limitedBtn.addEventListener('click', function() {
        limitedBtn.classList.add('active');
        unlimitedBtn.classList.remove('active');
        if (limitInputContainer) limitInputContainer.classList.remove('hidden'); // Chequear contenedor
        if (limitNumberInput) limitNumberInput.setAttribute('required', 'required'); // Chequear input
    });
}

if (createEventForm) { // âœ… AÃ‘ADIDO IF
    createEventForm.addEventListener('submit', function(e) {
        // ... (Tu lÃ³gica de formulario aquÃ­) ...
    });
}


// --- 4.5 Reset de Racha (Perfil) ---
if (resetButton) { // âœ… AÃ‘ADIDO IF
    resetButton.addEventListener('click', function() {
        localStorage.setItem('streak', '0');
        localStorage.removeItem('lastCompletionDate');
        updateStreak();
        updateLevelCharacter();
    });
}

// ==========================================================
// 5. INICIALIZACIÃ“N (LLAMADAS DE FUNCIONES)
// ==========================================================

// 1. LÃ“GICA DEL MODO OSCURO (Solo aplica el tema guardado)
// ESTE BLOQUE DEBE ESTAR SEPARADO PARA QUE EL RESTO DEL SCRIPT CORRA
if (localStorage.getItem('theme') === 'dark') { 
    document.body.classList.add('dark-mode');
    if (darkModeToggle) {
        darkModeToggle.checked = true; 
    }
}

// 2. EJECUCIÃ“N DE TODAS LAS FUNCIONES DE INICIALIZACIÃ“N
// ESTO SE EJECUTA SIEMPRE, SIN IMPORTAR EL MODO DE COLOR.
updateLevelCharacter();
updateSunMuv();
updateStreak();
renderEvents(); 
renderFriendsList();
renderCollectibles();
renderRoutines();
renderSocialFeed();
renderMapPins();

// 3. Muestra la pantalla inicial
navigateTo('home-screen');
})
// NOTA: El cierre del 'DOMContentLoaded' debe ir al final de todo el archivo.
